<svg xmlns="http://www.w3.org/2000/svg">

  <defs>
    {# --- helpers --- #}
    {% macro input_y_positions(H, n) -%}
  {% for i in range(n) %}
    {{ (H/(n+1.0))*(i+1) }}
  {% endfor %}
  {%- endmacro %}

    {% macro draw_inputs(n=2, x0=-20, x1=0, H=40) -%}
      {% set ys = input_y_positions(H, n) %}
      {% set ys = [5,15,25,35][:([4,n]|min)] %}
      {% if n == 1 %}
        <!-- replacement Output wire -->
        <line x1="-20" y1="{{H/2}}" x2="80" y2="{{H/2}}" stroke="orange"/>
      {% else %}
          {% for y in ys %}
            <line x1="{{ x0 }}" y1="{{ y }}" x2="{{ x1 }}" y2="{{ y }}" stroke="black"/>
          {% endfor %}
      {% endif %}
    {%- endmacro %}

    {% macro draw_output(x0, y, length=30) -%}
      <line x1="{{ x0 }}" y1="{{ y }}" x2="{{ x0 + length }}" y2="{{ y }}" stroke="red"/>
    {%- endmacro %}

    {% macro bubble(cx, cy, r=4) -%}
      <circle cx="{{ cx }}" cy="{{ cy }}" r="{{ r }}" stroke="black" fill="white"/>
    {%- endmacro %}

    {# --- bodies --- #}
    {% macro or_body(W=40,H=40) -%}
      <path d="M0,0
               Q{{0.2*W}},{{0.5*H}} 0,{{H}}
               Q{{0.6*W}},{{H}} {{W}},{{0.5*H}}
               Q{{0.6*W}},0 0,0"
            stroke="black" fill="white"/>
    {%- endmacro %}

    {% macro and_body(W=40,H=40) -%}
      <path d="M0,0 H{{0.5*W}} A{{0.5*W}},{{0.5*H}} 0 0 1 {{0.5*W}},{{H}} H0 Z"
            stroke="black" fill="white"/>
    {%- endmacro %}

    {% macro not_body(W=30,H=20) -%}
      <polygon points="0,0 {{W}},{{H/2}} 0,{{H}}" stroke="black" fill="white"/>
    {%- endmacro %}

    {# --- master gate macro --- #}
    {% macro gate(type, n=2, W=40, H=40, inverted=false) -%}
      {% set ymid = H/2 %}
      <g>
        {% if type == "or" or type == "nor" %}
          {% if n != 1 %}
             {{ or_body(W,H) }}
          {% endif %}
          {{ draw_inputs(n,-20,0,H) }}
          {% if type == "nor" or inverted %}
              {% if n != 1 %}
                {{ bubble(W+5, ymid, 4) }}
              {% endif %}
            {{ draw_output(W+10, ymid, 30) }}
          {% else %}
            {{ draw_output(W, ymid, 30) }}
          {% endif %}
        {% elif type == "and" or type == "nand" %}
          {% if n != 1 %}
             {{ and_body(W,H) }}
          {% endif %}
          {{ draw_inputs(n,-20,0,H) }}
          {% if type == "nand" or inverted %}
              {% if n != 1 %}
                {{ bubble(W+5, ymid, 4) }}
              {% endif %}
            {{ draw_output(W+10, ymid, 30) }}
          {% else %}
            {{ draw_output(W, ymid, 30) }}
          {% endif %}
        {% elif type == "not" %}
          {{ not_body(W,H) }}
          <line x1="-15" y1="{{ ymid }}" x2="0" y2="{{ ymid }}" stroke="black"/>
          {{ bubble(W+5, ymid, 4) }}
          {{ draw_output(W+10, ymid, 0) }}
        {% elif type == "nand-not" %}
          {{ and_body(W/2,H/2) }}
          <line x1="-5" y1="{{ ymid/4 }}" x2="0" y2="{{ ymid/4 }}" stroke="black"/>
          <line x1="-5" y1="{{ ymid/4+10 }}" x2="0" y2="{{ ymid/4+10 }}" stroke="green"/>
          {{ bubble(W/2+5, ymid/2, 4) }}
          {{ draw_output(W/2+9, ymid/2, 6) }}
        {% elif type == "nor-not" %}
          {{ or_body(W/2,H/2) }}
          <line x1="-5" y1="{{ ymid/4 }}" x2="0" y2="{{ ymid/4 }}" stroke="black"/>
          <line x1="-5" y1="{{ ymid/4+10 }}" x2="0" y2="{{ ymid/4+10 }}" stroke="green"/>
          {{ bubble(W/2+5, ymid/2, 4) }}
          {{ draw_output(W/2+9, ymid/2, 6) }}
        {% endif %}
      </g>
    {%- endmacro %}

{% macro draw_wires(N=4, step=10, gate_space=50, gate_size=40, margin=5, wire_color="green", hwire_color="red") %}
  <g id="wires">
    {% set wire_space = (gate_size - 2*margin) / (N - 1) if N > 1 else 0 %}

    {% for k in range(N) %}
      {# compute shift (special rule for odd center wire) #}
      {% if N % 2 == 1 and k == N // 2 %}
        {% set shift = 0 %}
      {% else %}
        {% set shift = [k, N - 1 - k] | min %}
      {% endif %}

      {% set xpos  = -step * shift - 5 %}
      {% set y1pos = margin + wire_space * k %}

      {# top-half wires go up, bottom-half go down #}
      {% if k < N // 2 %}
        {% set y2pos =  - ((N - 1) / 2 - shift) * gate_space + gate_size/2 %}
      {% elif k > N // 2 or N % 2 == 0 %}
        {% set y2pos =  ((N - 1) / 2 - shift) * gate_space + gate_size/2 %}
      {% endif %}

      {# skip center wire when N is odd #}
      {% if not (N % 2 == 1 and k == N // 2) %}
        <!-- vertical wire -->
        <line x1="{{ xpos }}" y1="{{ y1pos }}" x2="{{ xpos }}" y2="{{ y2pos }}" stroke="{{ wire_color }}"/>

        <!-- horizontal wire -->
        <line x1="{{ xpos }}" y1="{{ y1pos }}" x2="20" y2="{{ y1pos }}" stroke="{{ hwire_color }}"/>
      {% endif %}
    {% endfor %}
  </g>
{% endmacro %}
{% macro draw_wires2(N=4, step=10, gate_space=50) %}
  <g id="wires">
    <!-- wires from AND to OR -->
    {% for k in range(N) %}
        {% set shift = 0 if (N % 2 == 1 and k == N // 2) else ([k, N - 1 - k]|min) %}
        {% set gate_size = 40 %}
        {% set margin = 5 %}
        {% set wire_space = (gate_size -2*margin)/(N-1)  %}
        {#% set wire_space = 10  %#}
        {% set xpos = -step*shift-5 %}
        {% set y1pos = margin + wire_space*k %}
        {% set y2pos = -5-((N-1)/2-shift)*gate_space+25 if (k < N // 2) else -5+((N-1)/2-shift)*gate_space+25 %}
    <!-- vertical wire -->
      {% if not (N % 2 == 1 and k == N // 2) %}
        <line x1="{{xpos}}" y1="{{y1pos}}" x2="{{xpos}}" y2="{{y2pos}}" stroke="green"/>
        <!-- horizental wire -->
        <line x1="{{xpos}}" y1="{{y1pos}}" x2="20" y2="{{y1pos}}" stroke="red"/>
        {% endif %}
       {#
        <text x="{{xpos}}" y="{{5+10*k}}"  font-family="serif" font-size="8">x={{xpos}} y={{y1pos}}</text>
        <text x="{{xpos-20}}" y="{{y1pos}}"  font-family="serif" font-size="8">x={{xpos}} y2={{y2pos}}</text>

        <text x="{{xpos-40}}" y="{{y1pos}}"  font-family="serif" font-size="6">shift= {{shift}} k={{k}} x={{xpos}} y2={{y2pos}}</text>
        #}

      {% endfor %}
  </g>
{% endmacro %}
  </defs>

  <!-- Examples -->
  <g transform="translate(20,20)">{{ gate("or", 3) }}</g>
  <g transform="translate(120,20)">{{ gate("nor", 2) }}</g>
  <g transform="translate(220,20)">{{ gate("and", 4) }}</g>
  <g transform="translate(20,80)">{{ gate("nand", 3) }}</g>
  <g transform="translate(120,80)">{{ gate("not", 1, W=30,H=20) }}</g>

</svg>
