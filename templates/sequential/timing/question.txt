{% import "sequential/macros/timingmacros.txt" as tmmacro %}

 {{tr("Complete the following timing diagram:")}}   


{% if RENDER_MODE.lower() == "question" %}
{{ tmmacro.draw_timing_diagram(data, mode="question")|normalize_newlines }}
{%endif%}
{% if RENDER_MODE.lower() == "answer" %}
{{ tmmacro.draw_timing_diagram(data, mode="answer")|normalize_newlines }}
{%endif%}


{% if RENDER_MODE|lower == "answer" and debug %}
### Debug

```
Clock:
{{ data.clock|pprint }}

Input signals (raw):
{{ data.input_signals|pprint }}

Output signals (raw):
{{ data.output_signals|pprint }}

Full data:
{{ data|pprint }}
```


{% for edge in ("rising", "falling", "high", "low", "dual") %}
### Test of list of signals on {{ edge }}


  {% set s1 = [-1, 2, -2, 3, -1, 2] %}
  {% set s2 = [2, -1, 1, -2, 3] %}
  {% set s3 = [-2, 1, -1, 2, -2, 1] %}
  {% set signals = {"s1":s1, "s2":s2, "s3":s3} %}

    {{ tmmacro.multi_signals(signals, synch_type=edge)|normalize_newlines }}

{% endfor %}

---

### Test of signal from list


    {{ tmmacro.draw_signalt([-1, 2, -2, 3, -1, 2], var_name="Diga")|normalize_newlines }}



### Test of clock signals

**Dual**


    {{ tmmacro.clock_signal(1, 5, 80, 60, "green", 3)|normalize_newlines }}



**Falling**


    {{ tmmacro.clock_signal(1, 5, 80, 60, "green", 3, edge="falling")|normalize_newlines }}


**Rising**


    {{ tmmacro.clock_signal(1, 5, 80, 60, "green", 3, edge="rising")|normalize_newlines }}



**High level**


    {{ tmmacro.clock_signal(1, 5, 80, 60, "green", 3, edge="high")|normalize_newlines }}




{% endif %}

