{% macro bin2hex_table(binary_str) %}
  {% set headers = [] %}
  {% set row2 = [] %}
  {% for group in binary_str|batch(4, "0")|map("join") %}
    {% set _ = headers.append(group) %}
    {% set _ = row2.append("%X"|format(group|int(base=2))) %}
  {% endfor %}

  {{ ([["Base 2"] + headers, ["Base 16"] + row2]) | tabulate(headers="firstrow", tablefmt="github") }}
{% endmacro %}


{% macro bin2oct_table(binary_str) %}
  {% set headers = [] %}
  {% set row2 = [] %}
  {% for group in binary_str|batch(3, "0")|map("join") %}
    {% set _ = headers.append(group) %}
    {% set _ = row2.append(group|int(base=2)) %}
  {% endfor %}

  {{ ([["Base 2"] + headers, ["Base 8"] + row2]) | tabulate(headers="firstrow", tablefmt="github") }}
{% endmacro %}


{% macro hex2bin_table(hex_str) %}
  {% set headers = [] %}
  {% set row2 = [] %}
  {% for c in hex_str %}
    {% set _ = headers.append(c) %}
    {% set _ = row2.append(c|int(base=16)|to_bin(4)) %}
  {% endfor %}

{{ ([["Base 16"] + headers, ["Base 2"] + row2]) | tabulate(headers="firstrow", tablefmt="github") }}
{% endmacro %}


{% macro oct2bin_table(oct_str) %}
  {% set headers = [] %}
  {% set row2 = [] %}
  {% for c in oct_str %}
    {% set _ = headers.append(c) %}
    {% set _ = row2.append(c|int(base=8)|to_bin(3)) %}
  {% endfor %}

  {{ ([["Base 8"] + headers, ["Base 2"] + row2]) | tabulate(headers="firstrow", tablefmt="github") }}
{% endmacro %}


{% macro hex2oct_table(hex_str) %}
  {# Step 1: convert each hex digit to binary (4 bits) and concatenate #}
  {% set ns=namespace(bin_str = "", oct_digits = []) %}
  {% for c in hex_str %}
    {% set ns.bin_str = ns.bin_str + (c|int(base=16)|to_bin(4)) %}
  {% endfor %}

  {# add 0 for ajusting bin_str #}
  TO ADD {{ (-(ns.bin_str|length)%3) }}
  {% set pad = (-(ns.bin_str|length)%3) %}
   PAD {{pad}}
  {% set ns.bin_str = "0"*pad + ns.bin_str %}

  {# Step 3: group binary into octal (3 bits) #}
  {% for g in ns.bin_str|batch(3, "0") %}
    {% set ns.oct_digits = ns.oct_digits + [g|join] %}
  {% endfor %}



  BIN_str '{{ ns.bin_str }}'

  OCT {{ ns.oct_digits }}


  Hex {{ hex_str }}

  {{ hex2bin_table(hex_str) }}
  {{ bin2oct_table(ns.bin_str) }}

{% endmacro %}

{# needs a to_bin(value, width) filter registered in Jinja #}
{% macro oct2hex_table(oct_str) %}
  {% set ns=namespace(bin_str = "") %}
  {% set oct_str = (oct_str|string) %}

  {# 1) OCT â†’ BIN (concatenate 3-bit chunks) #}
  {% set ns.bin_str = "" %}
  {% for c in oct_str %}
    {% set ns.bin_str = ns.bin_str + (c|int(base=8)|to_bin(3)) %}
  {% endfor %}

  {{ oct2bin_table(oct_str) }}
  {{ bin2hex_table(ns.bin_str) }}

{% endmacro %}


{#--- main_macro ---#}
{% macro base_convert_table(num_str, from_base, to_base) %}
  <h3>Convert from base {{ from_base }} to base {{ to_base }}</h3>
  {% if from_base == 16 and to_base == 8 %}
    {{ hex2oct_table(num_str|string) }}
  {% elif from_base == 8 and to_base == 16 %}
    {{ oct2hex_table(num_str|string) }}
  {% elif from_base == 2 and to_base == 16 %}
    {{ bin2hex_table(num_str|string) }}
  {% elif from_base == 16 and to_base == 2 %}
    {{ hex2bin_table(num_str|string) }}
  {% elif from_base == 2 and to_base == 8 %}
    {{ bin2oct_table(num_str|string) }}
  {% elif from_base == 8 and to_base == 2 %}
    {{ oct2bin_table(num_str|string) }}
 {% elif from_base == 10 and to_base != 10 %}

  {% endif %}
{% endmacro %}