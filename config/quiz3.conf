[DEFAULT]
# List of stemmers to test
# Defalut
#// default configuration of available tests
[QUIZES]
quizes = ["test1", "test2", "test3", "test4", "test5","test6", "test7","bankquestion", "test8"]
commands =["float", 
 "intervalle",
 "complement",
 "exp",            
 "map",
 "map-sop",
 "function",
 "base",
 "arithm",
 "mesure",
 "static_funct",
 "multi_funct"]
[Tests]
test1=[["base", "base", "arithm"], 
 ["mesure", "base", "arithm"],
 ["base", "mesures", "arithm"],]
test2=[["float", "map"],
        ["float", "map-sop"],
        ["float", "function"],
        ["complement","complement", "map"],
        ["function", "exp"],
        ["function", "exp"],]
test3=[["function", "exp"],]
test4=[["static_funct"]]
test5=[["multi_funct",],]
test6=[["exp","chronogram",],]
test7=[["nand_funct","nor_funct"]]
test8=[["chronogram"]]
bankquestion=[['float'], ['intervalle'],
 ['complement'], ['exp'], ['map'],
 ['map-sop'], ['function'], ['base'], ['arithm'], ['mesure'], 
 ['nand_funct'], ['nor_funct'], ]
[Args]
repeat=1
size=1
random=False
vars=["A","B","C", "D"]
# a problem in renamign vars, with nand or and
#vars=["U","V","Q", "X"]
method="nand"
#simplification="sop"
# Decimal to morse code
#outputs=["M1","M2", "M3", "M4", "M5"]
# by short dash is one
# minterms=[[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8], [5,6,7,8,9]]
# by long dash is one
#minterms=[[0, 6, 7, 8, 9],[0, 1, 7, 8, 9],[0, 1, 2, 8, 9],[0, 1, 2, 3, 9], [0, 1, 2, 3, 4]]
#dontcare=[[10,11,12,13,14,15],[10,11,12,13,14,15],[10,11,12,13,14,15],[10,11,12,13,14,15],[10,11,12,13,14,15]]
# Signal sign numbers
#outputs=["S1","S2", "S3", "S4", "S5"]
# from Finger Thumb
#minterms=[[3,5,10],[1,2,3,4,5,6,7,8],[2,3,4,5,6,7,9],[4,5,6,8,9], [4,5,7,8,9]]
#dontcare=[[11,12,13,14,15],[11,12,13,14,15],[11,12,13,14,15],[11,12,13,14,15],[11,12,13,14,15]]

# Count max between zeros and ones.
#outputs=["S","X", "Y", "Z"]
#minterms=[[7,11,13,14,15],[0,15],[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[1,2,4,7,8,11,13,14]]
#used to draw optimal diagram
# minterms=[[7,11,13,14,15],[0,15],[0,15],[3,7,11,12,13,14,15]]
# div3 and remain for division by 3
#outputs=["Q2","Q1", "Q0", "R1", "R0"]
#minterms=[[12,13,14,15],[6,7,8,9,10,11],[3,4,5,9,10,11,15],[2,5,8,11,14],[1,4,7,10,13]]
#dontcare=[[],[],[],[],[]]
# Diagonal light game 
#outputs=["L0","L1", "L2", "L3", "L4", "L5","L6"]
#minterms=[[1,2,3,4,5,6,7, 8,9,10,11,12,13,14],[2,3,4,5,6,7, 8,9,10,11,12,13],[3,4,5,6,7, 8,9,10,11,12],[4,5,6,7, 8,9,10,11 ],[5,6,7, 8,9,10],[6,7, 8,9],[7, 8],]
#dontcare=[[],[],[],[],[],[],[]]

# div25 and remain for division by 25
#outputs=["X","Y", "Z", "P20", "P10", "P5"]
#minterms=[[10,11,12,13,14,15],[5,6,7,8,9,15],[3,4,8,9,13,14],[2,7,12],[1,4,6,9,11,14],[3,4,8,9,13,14]]
#dontcare=[[],[],[],[],[],[]]

# Ex3 to BCD
outputs=["W","X", "Y", "Z"]
minterms=[[11, 12, 13, 14, 15],[7, 8, 9, 10, 15],[5, 6, 9, 10, 1, 2, 13, 14], [4, 6, 8, 10, 12, 0, 2, 14]]
dontcare=[[],[],[],[],[],[]]


# UV flip flop
#outputs=["QQ"]
#minterms=[[2,4,6,7,8,9,10,11,12,13,14,15]]
#dontcare=[[],[],[],[],[],[]]


# Shift code
#minterms=[[5,7,13,15],[3,7,8,10,11,12,14,15],[1,3,4,5,6,7,9,11,12,13,14,15],[2,6,9,10,11,13,14,15]]
#dontcare=[[],[],[],[]]

## Sequentiel configuration
varlist={"U":0, "V":0, "Q":0, "Q'":0}
#varlist={"J":0, "K":-1, "Q":0, "Q0'":0, "Q1":0}
length=24
flip_type="UV"
#flip_type="JK"
synch_type="falling"
#synch_type="rising"
output=["Q", "Q'"]
